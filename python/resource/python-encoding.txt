url:http://bindog.github.io/blog/2014/12/16/python-coding/

首先声明，本文不是科普，如果你对Unicode、utf-8、gb2312、gbk这样的概念非常陌生的话，强烈建议你先看下字符编码的奥秘utf-8, Unicode和速解UTF-8中文字符，方法和原理这两篇文章，图文并茂~

有几点这里还是要再次强调一下：

字符的编码与字符在计算机中的存储是并非完全一样
Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储
utf-8是Unicode的一种实现，其他还有utf-16和utf-32，只不过用的很少罢了
虽然都支持中文，但是utf-8和gb系列的编码是完全不兼容的，要想互相转换必须要通过Unicode作为媒介

当记事本遇到一个未知编码的文件，如果发现其字节流符合utf-8的编码标准，就认为这个文件是以utf-8编码的。我们来看“联通”这两个字的gbk编码，联C1 AA，通 CD A8，与上面的正则表达式对比后就可以发现，这两个字的gbk编码恰好是符合utf-8编码规范的(落在[\xC0-\xDF][\x80-\xBF]这个范围中)，所以记事本就猜这个文件是以utf-8编码的，自然会出现乱码。

那么，还有哪些中文字符存在这些问题呢？我们用一个程序把它们全找出来
====================code===========================================

col = "     "
for i in range(0,16):
    col = col + "+" + hex(i)[2:].upper() + " "
print col
newline = True
for i in range(192,224):
    line = u""
    linenum1 = hex(i)[2:].upper()
    count = 0
    for j in range(128,192):
        if newline:
            linenum2 = hex(j - j % 16)[2:].upper()
            line = linenum1 + linenum2 + " "
            newline = False
        c = chr(i) + chr(j)
        line = line + c.decode("gbk") + " "
        count = count + 1
        if count % 16 == 0:
            print line.strip()
            count = 0
            newline = True
=========================code end================
